<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TemplateJune2015</name>
    </assembly>
    <members>
        <member name="F:Template.DamageSprite.target">
            <summary>
            HitBox to represent
            </summary>
        </member>
        <member name="F:Template.DamageSprite.health">
            <summary>
            Variable used to store target's health
            </summary>
        </member>
        <member name="M:Template.DamageSprite.#ctor(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Template.HitBox)">
            <summary>
            Constructor for damageSprite
            </summary>
            <param name="position">Coordinates of centre of sprite</param>
            <param name="dimensions">X and Y scale</param>
            <param name="hitbox">Hitbox to target</param>
        </member>
        <member name="M:Template.DamageSprite.Tick">
            <summary>
            Code to run each tick
            </summary>
        </member>
        <member name="F:Template.Game.Button.display">
            <summary>
            Sprite to display within the button
            </summary>
        </member>
        <member name="F:Template.Game.Button.enabled">
            <summary>
            True if UI element can be clicked
            </summary>
        </member>
        <member name="F:Template.Game.Button.faded">
            <summary>
            True if UI element needs to be faded out
            </summary>
        </member>
        <member name="M:Template.Game.Button.#ctor(Microsoft.Xna.Framework.Rectangle,System.Boolean)">
            <summary>
            Button is used as a UI element that can be interacted with using the mouse
            </summary>
            <param name="rect">Dimensions for button</param>
            <param name="startEnabled">Is the button enabled to begin with - set to false for UI backgrounds</param>
        </member>
        <member name="M:Template.Game.Button.Tick">
            <summary>
            Code to run each tick
            </summary>
        </member>
        <member name="M:Template.Game.Button.PressedLeft">
            <summary>
            Returns true if left clicked
            </summary>
            <returns></returns>
        </member>
        <member name="M:Template.Game.Button.HeldLeft">
            <summary>
            Returns true if left held
            </summary>
            <returns></returns>
        </member>
        <member name="M:Template.Game.Button.PressedRight">
            <summary>
            Returns true if right clicked
            </summary>
            <returns></returns>
        </member>
        <member name="M:Template.Game.Button.HeldRight">
            <summary>
            Returns true if right held
            </summary>
            <returns></returns>
        </member>
        <member name="M:Template.Game.Button.Hover">
            <summary>
            Returns true if mouse is hovered over button
            </summary>
            <returns></returns>
        </member>
        <member name="M:Template.Game.Button.SetDisplay(Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Displays a rectangle in Sprites.png within the button
            </summary>
            <param name="tile">Rectangle to select from tilemap</param>
        </member>
        <member name="F:Template.Game.CannonBall.owner">
            <summary>
            Ship that fired the CannonBall
            </summary>
        </member>
        <member name="F:Template.Game.CannonBall.shotType">
            <summary>
            Type of this CannonBall - 0 ball shot, 1 bar shot, 2 carcass shot, 3 grape shot
            </summary>
        </member>
        <member name="F:Template.Game.CannonBall.fireDelay">
            <summary>
            Time to wait before firing
            </summary>
        </member>
        <member name="F:Template.Game.CannonBall.velApplied">
            <summary>
            True if velocity has been added after spawning
            </summary>
        </member>
        <member name="F:Template.Game.CannonBall.splash">
            <summary>
            True if CannonBall doesnt hit anything and needs to splash as though it landed in water
            </summary>
        </member>
        <member name="M:Template.Game.CannonBall.#ctor(Engine7.Sprite,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Int32)">
            <summary>
            Constructor for CannonBall class
            </summary>
            <param name="owner">The ship that fired the CannonBall</param>
            <param name="fireFrom">2D position to fire from</param>
            <param name="fireDir">2D position to fire towards</param>
            <param name="type">Type of shot to use - 0 ball shot, 1 bar shot, 2 carcass shot, 3 grape shot, 4 grapple shot</param>
        </member>
        <member name="M:Template.Game.CannonBall.Death">
            <summary>
            Creates particles when deleted
            </summary>
        </member>
        <member name="M:Template.Game.CannonBall.Tick">
            <summary>
            Code to run each tick
            </summary>
        </member>
        <member name="M:Template.Game.CannonBall.Hit(Engine7.Sprite)">
            <summary>
            Code to run upon hitting a sprite
            </summary>
            <param name="hit">The sprite collided with</param>
        </member>
        <member name="M:Template.Game.CannonBall.AfterHit(Engine7.Sprite)">
            <summary>
            Code to run after resolving hit
            </summary>
            <param name="hit">Sprite that was hit</param>
        </member>
        <member name="F:Template.Game.GameSetup.player">
            <summary>
            The player's ship
            </summary>
        </member>
        <member name="F:Template.Game.GameSetup.opponent">
            <summary>
            The AI's ship
            </summary>
        </member>
        <member name="F:Template.Game.GameSetup.windDir">
            <summary>
            The wind direction
            </summary>
        </member>
        <member name="F:Template.Game.GameSetup.opponentArrow">
            <summary>
            Sprite used to point to enemy when out of view
            </summary>
        </member>
        <member name="F:Template.Game.GameSetup.playerView">
            <summary>
            Viewport for the player
            </summary>
        </member>
        <member name="F:Template.Game.GameSetup.boardingInProgress">
            <summary>
            True if boarding preparations made and crew should now be fighting
            </summary>
        </member>
        <member name="F:Template.Game.GameSetup.tiOneSecond">
            <summary>
            Timer for 1 second delay
            </summary>
        </member>
        <member name="F:Template.Game.GameSetup.crewDisplayPlayer">
            <summary>
            Sprite used to display the player's crew numbers in boarding
            </summary>
        </member>
        <member name="F:Template.Game.GameSetup.crewDisplayBackground">
            <summary>
            Sprite used for background if player's crew numbers in boarding
            </summary>
        </member>
        <member name="M:Template.Game.GameSetup.#ctor">
            <summary>
            Sets up all the initial values for the game
            </summary>
        </member>
        <member name="M:Template.Game.GameSetup.Tick">
            <summary>
            Check for keypresses used to end game
            </summary>
        </member>
        <member name="M:Template.Game.GameSetup.OneSecond">
            <summary>
            Code to run each second
            </summary>
        </member>
        <member name="M:Template.Game.GameSetup.BackToTitle(System.String)">
            <summary>
            Resets game to title screen
            </summary>
        </member>
        <member name="T:Template.Opponent">
            <summary>
            Ship for the AI
            </summary>
        </member>
        <member name="F:Template.Opponent.aggressiveness">
            <summary>
            Aggressiveness of the AI - 0 is minimum aggressiveness, 1 is maximum
            </summary>
        </member>
        <member name="F:Template.Opponent.alignmentLastTick">
            <summary>
            Used to track alignment variable from the previous tick
            </summary>
        </member>
        <member name="F:Template.Opponent.state">
            <summary>
            Current state of the AI - 0 idle, 1 attacking, 2 retreating, 3 boarding, 4 ramming
            </summary>
        </member>
        <member name="F:Template.Opponent.stateTick">
            <summary>
            Timer for 1 second delay
            </summary>
        </member>
        <member name="F:Template.Opponent.player">
            <summary>
             Used to easily get attributes from GameSetup.player
             </summary>
        </member>
        <member name="F:Template.Opponent.sideFaceSprite">
            <summary>
            Used with RotationHelpers to check when perpendicular to objects
            </summary>
        </member>
        <member name="M:Template.Opponent.#ctor(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Contains state machine for the AI
            </summary>
            <param name="startPos">Position to spawn at</param>
        </member>
        <member name="M:Template.Opponent.Tick">
            <summary>
            Code to run each tick
            </summary>
        </member>
        <member name="T:Template.Player">
            <summary>
            Ship for the player
            </summary>
        </member>
        <member name="F:Template.Player.cursor">
            <summary>
            Player's cursor
            </summary>
        </member>
        <member name="F:Template.Player.moveTo">
            <summary>
            Point to move towards
            </summary>
        </member>
        <member name="F:Template.Player.cutRopeButton">
            <summary>
            Button for cutting ropes when boarding
            </summary>
        </member>
        <member name="F:Template.Player.speedButton">
            <summary>
            Button for setting speed
            </summary>
        </member>
        <member name="F:Template.Player.fireRightButton">
            <summary>
            Button to fire and load right cannon
            </summary>
        </member>
        <member name="F:Template.Player.fireLeftButton">
            <summary>
            Button to fire and load left cannon
            </summary>
        </member>
        <member name="F:Template.Player.repairButton">
            <summary>
            Button to start and stop repairing
            </summary>
        </member>
        <member name="F:Template.Player.UIButtonsBackground">
            <summary>
            Background element for Buttons, used to stop player giving move orders behind the Buttons
            </summary>
        </member>
        <member name="F:Template.Player.UIDamageBackground">
            <summary>
            Background element for DamageSprites, used to stop player giving move orders behind the DamageSprites
            </summary>
        </member>
        <member name="F:Template.Player.UIBackgroundElements">
            <summary>
            Array for UI background elements
            </summary>
        </member>
        <member name="F:Template.Player.fireZone">
            <summary>
            Sprite used to display the range and firing angles of the cannons
            </summary>
        </member>
        <member name="F:Template.Player.damageHullFront">
            <summary>
            DamageSprite used to display the health of the front hull HitBox
            </summary>
        </member>
        <member name="F:Template.Player.damageHullBack">
            <summary>
            DamageSprite used to display the health of the back hull HitBox
            </summary>
        </member>
        <member name="F:Template.Player.damageHullLeft">
            <summary>
            DamageSprite used to display the health of the left hull HitBox
            </summary>
        </member>
        <member name="F:Template.Player.damageHullRight">
            <summary>
            DamageSprite used to display the health of the right hull HitBox
            </summary>
        </member>
        <member name="F:Template.Player.damageSailFront">
            <summary>
            DamageSprite used to display the health of the front sail HitBox
            </summary>
        </member>
        <member name="F:Template.Player.damageSailMiddle">
            <summary>
            DamageSprite used to display the health of the middle sail HitBox
            </summary>
        </member>
        <member name="F:Template.Player.damageSailBack">
            <summary>
            DamageSprite used to display the health of the back sail HitBox
            </summary>
        </member>
        <member name="F:Template.Player.UIReloadRight">
            <summary>
            Sprite used to represent right cannons reloading
            </summary>
        </member>
        <member name="F:Template.Player.UIReloadLeft">
            <summary>
            Sprite used to represent left cannons reloading
            </summary>
        </member>
        <member name="F:Template.Player.buttonPressed">
            <summary>
            This must be set to true if a button has been pressed during a tick, else button presses could be interpreted as movement orders
            </summary>
        </member>
        <member name="F:Template.Player.UISinkBarBot">
            <summary>
            UI element to display sinking, goes behind.
            </summary>
        </member>
        <member name="F:Template.Player.UISinkBarTop">
            <summary>
            UI element to display sinking, goes on top and moves up as more water is taken on.
            </summary>
        </member>
        <member name="M:Template.Player.#ctor(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Contains functions for the player to give orders
            </summary>
            <param name="startPos">Position to spawn at</param>
        </member>
        <member name="M:Template.Player.Tick">
            <summary>
            Code to run each tick
            </summary>
        </member>
        <member name="F:Template.FadingParticle.tiLifetime">
            <summary>
            Time until particle fades
            </summary>
        </member>
        <member name="M:Template.FadingParticle.#ctor(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector3,System.Single,System.Single)">
            <summary>
            Constructor for smoke particle
            </summary>
            <param name="spawnPos"></param>
            <param name="spawnVel"></param>
            <param name="spawnAngle"></param>
            <param name="lifetime">Minimum lifetime for particle in seconds</param>
        </member>
        <member name="M:Template.FadingParticle.LifeCountdown">
            <summary>
            Code to run each tick until tiLifetime elapses
            </summary>
        </member>
        <member name="F:Template.HitBox.isParent">
            <summary>
            True if HitBox is parent of other HitBoxes
            </summary>
        </member>
        <member name="F:Template.HitBox.isBurning">
            <summary>
            True if HitBox is burning, causing damage over time
            </summary>
        </member>
        <member name="F:Template.HitBox.owner">
            <summary>
            Owner of HitBox, for child HitBoxes this is the parent HitBox, for parent HitBoxes this is the Ship it is created by
            </summary>
        </member>
        <member name="F:Template.HitBox.damageType">
            <summary>
            Type of damage taken by hitbox - 0 hull, 1 sail
            </summary>
        </member>
        <member name="F:Template.HitBox.offsetVector">
            /// <summary>
            Normalised offset vector from centre of owner
            </summary>
        </member>
        <member name="F:Template.HitBox.offsetMagnitude">
            <summary>
            Value to multiply offsetVector by to get a position
            </summary>
        </member>
        <member name="F:Template.HitBox.offsetAngle">
            <summary>
            Extra rotation for offsetVector to account for owner turning
            </summary>
        </member>
        <member name="F:Template.HitBox.health">
            <summary>
            Health of HitBox
            </summary>
        </member>
        <member name="F:Template.HitBox.damageMul">
            <summary>
            Value to multiply damage by when subtracting from health
            </summary>
        </member>
        <member name="F:Template.HitBox.tiBurnTick">
            <summary>
            Delay for damage over time when burning
            </summary>
        </member>
        <member name="M:Template.HitBox.#ctor(Engine7.Sprite,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single,System.Int32)">
            <summary>
            Constructor for hitbox
            </summary>
            <param name="hitBoxOwner">Parent of the hitbox</param>
            <param name="offsetFromOwner">Offset from owner centre when facing up - this can never be zero!</param>
            <param name="dimensions">Height and Width of hitbox</param>
            <param name="damageMultiplier">Damage taken is multiplied by this amount</param>
            <param name="type">Type of damage taken by hitbox - 0 hull, 1 sail</param>
        </member>
        <member name="M:Template.HitBox.Hit(Engine7.Sprite)">
            <summary>
            Code to run upon hitting a sprite
            </summary>
            <param name="hit">The sprite collided with</param>
        </member>
        <member name="M:Template.HitBox.CreateCollisionArea(System.Single)">
            <summary>
            Creates collisions for HitBox that can approximate a rotation using smaller HitBoxes
            </summary>
            <param name="colResolution">Resolution of HitBoxes, higher values are more accurate but slower</param>
        </member>
        <member name="M:Template.HitBox.Tick">
            <summary>
            Code to run each tick
            </summary>
        </member>
        <member name="T:Template.Rope">
            <summary>
            Rope sprite used for boarding
            </summary>
        </member>
        <member name="M:Template.Rope.#ctor(Engine7.Sprite,Engine7.Sprite)">
            <summary>
            Constructor for Rope
            </summary>
            <param name="Origin"></param>
            <param name="Target"></param>
        </member>
        <member name="M:Template.Rope.Tick">
            <summary>
            Code to run each tick.
            </summary>
        </member>
        <member name="T:Template.GM">
            <summary>
            holds all game assets and code to set up those assets
            </summary>
            <summary>
            Contains the code that setsup and closes the system
            </summary>
            <summary>
            This is the main type for your game
            </summary>
        </member>
        <member name="F:Template.GM.fileM">
            <summary>
            organises and saves files in the given folder
            </summary>
        </member>
        <member name="F:Template.GM.THROTTLE">
            <summary>
            determines if game is being throttled (DEFAULT), 
            this links rendering to the refresh rate of the monitor (which prevents tearing)
            </summary>
        </member>
        <member name="F:Template.GM.UPDATE_RATE">
            <summary>
            how many times a second do you want the internal clocks and logic to operate at defaults to 100
            </summary>
        </member>
        <member name="F:Template.GM.screenSize">
            <summary>
            reference to screen size - smaller is better as this will be quickler
            </summary>
        </member>
        <member name="F:Template.GM.active">
            <summary>
            holds currently active container
            </summary>
        </member>
        <member name="F:Template.GM.txSprite">
            <summary>
            holds the example sprite
            </summary>
        </member>
        <member name="M:Template.GM.StartPreLoader">
            <summary>
            specifies what assets are being loaded
            </summary>
        </member>
        <member name="M:Template.GM.Setup">
            <summary>
            deals with creation of other assets once all textures and sounds are loaded
            run after all assets have been loaded
            </summary>
        </member>
        <member name="M:Template.GM.CreateTracks">
            <summary>
            create any track definitions for the game
            </summary>
        </member>
        <member name="M:Template.GM.StartSystem">
            <summary>
            starts the game off with the title screen
            </summary>
        </member>
        <member name="M:Template.GM.Start">
            <summary>
            start the system now everything is loaded
            </summary>
        </member>
        <member name="M:Template.GM.ShutDown">
            <summary>
            cleanly exits the game saving data to files
            </summary>
        </member>
        <member name="F:Template.GM.graphics">
            <summary>
            Creates reference to the graphics device
            </summary>
        </member>
        <member name="F:Template.GM.engineM">
            <summary>
            the engine manager
            </summary>
        </member>
        <member name="F:Template.GM.tileMapM">
            <summary>
            the tilemap manager
            </summary>
        </member>
        <member name="F:Template.GM.menuM">
            <summary>
            handles menu display and activation
            </summary>
        </member>
        <member name="F:Template.GM.eventM">
            <summary>
            the event manager
            </summary>
        </member>
        <member name="F:Template.GM.textM">
            <summary>
            the text manager
            </summary>
        </member>
        <member name="F:Template.GM.audioM">
            <summary>
            the audio manager
            </summary>
        </member>
        <member name="F:Template.GM.inputM">
            <summary>
            the input manager
            </summary>
        </member>
        <member name="F:Template.GM.loadM">
            <summary>
            handles loading assets in the background
            </summary>
        </member>
        <member name="M:Template.GM.#ctor">
            <summary>
            constructs the basic game elements
            </summary>
        </member>
        <member name="M:Template.GM.CheckAssemblyDetails">
            <summary>
            determines if basic template settings have been changed or not
            throwing exceptions if they have not
            </summary>
        </member>
        <member name="M:Template.GM.Initialize">
            <summary>
            Allows the game to perform any initialization it needs to before starting to run.
            This is where it can query for any required services and load any non-graphic
            related content.  Calling base.Initialize will enumerate through any components
            and initialize them as well.
            </summary>
        </member>
        <member name="M:Template.GM.GM_Exiting(System.Object,System.EventArgs)">
            <summary>
            called when game is shutting down
            </summary>
            <param name="sender">the sender of the exit request</param>
            <param name="e">arguments to go along with the closing event</param>
        </member>
        <member name="M:Template.GM.CloseSystem">
            <summary>
            closes the system down formally
            </summary>
        </member>
        <member name="F:Template.GM.gameState">
            <summary>
            holds current state of game, starts with LOAD_UP
            </summary>
        </member>
        <member name="F:Template.GM.r">
            <summary>
            a random number generator
            </summary>
        </member>
        <member name="F:Template.GM.startThisState">
            <summary>
            holds the state the game is in
            </summary>
        </member>
        <member name="M:Template.GM.GameLoop">
            <summary>
            perform general logic actions
            </summary>
        </member>
        <member name="M:Template.GM.ProcessStateChange">
            <summary>
            processes game state change requests
            </summary>
        </member>
        <member name="M:Template.GM.LoadingLogic">
            <summary>
            performs logic while loading assets
            </summary>
        </member>
        <member name="M:Template.GM.ClearAllButSprites">
            <summary>
            removes/disables or stops all managed assets except sprites
            </summary>
        </member>
        <member name="M:Template.GM.ClearAllManagedObjects">
            <summary>
            removes/disables or stops all managed assets
            </summary>
        </member>
        <member name="M:Template.GM.ClearSounds">
            <summary>
            stops all sounds playing
            </summary>
        </member>
        <member name="M:Template.GM.ClearAllButSound">
            <summary>
            removes/disables everything but music and sound effects
            </summary>
        </member>
        <member name="M:Template.GM.ClearAllButMusic">
            <summary>
            removes/disables everything but the current music playing
            </summary>
        </member>
        <member name="M:Template.GM.LoadContent">
            <summary>
            LoadContent will be called once per game and is the place to load
            all of your content.
            </summary>
        </member>
        <member name="M:Template.GM.UnloadContent">
            <summary>
            UnloadContent will be called once per game and is the place to unload
            all content.
            </summary>
        </member>
        <member name="M:Template.GM.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Allows the game to run logic such as updating the world,
            checking for collisions, gathering input, and playing audio.
            </summary>
            <param name="gameTime">Provides a snapshot of timing values.</param>
        </member>
        <member name="M:Template.GM.Draw(Microsoft.Xna.Framework.GameTime)">
            <summary>
            This is called when the game should draw itself.
            </summary>
            <param name="gameTime">Provides a snapshot of timing values.</param>
        </member>
        <member name="T:Template.BasicSetup">
            <summary>
            hold base settings here for items needed during all containers
            </summary>=
        </member>
        <member name="F:Template.BasicSetup.evLogic">
            <summary>
            holds the logic event
            </summary>
        </member>
        <member name="M:Template.BasicSetup.#ctor(System.Boolean)">
            <summary>
            contains items that all containers need to activate
            </summary>
        </member>
        <member name="M:Template.BasicSetup.Tick">
            <summary>
            default logic for the container. You need to override this method
            </summary>
        </member>
        <member name="T:Template.Cursor">
            <summary>
            defines a cursor sprite
            </summary>
        </member>
        <member name="F:Template.Cursor.evLogic">
            <summary>
            an event to control operational logic for this sprite
            </summary>
        </member>
        <member name="F:Template.Cursor.mode">
            <summary>
            0 for default, 1 for movement
            </summary>
        </member>
        <member name="M:Template.Cursor.CleanUp">
            <summary>
            make sure the event is removed when this object is destroyed
            </summary>
        </member>
        <member name="M:Template.Cursor.#ctor(Microsoft.Xna.Framework.Point)">
            <summary>
            allows a starting position to be specified
            </summary>
            <param name="start">the start position</param>
        </member>
        <member name="M:Template.Cursor.Logic">
            <summary>
            update logic that needs to be performed
            </summary>
        </member>
        <member name="M:Template.Cursor.Reset(Microsoft.Xna.Framework.Vector2)">
            <summary>
            set the new position of the cursor
            </summary>
            <param name="newPosition">position to set cursor</param>
        </member>
        <member name="T:Template.ExtraMessageTypes">
            <summary>
            defines a message types
            </summary>
        </member>
        <member name="F:Template.ExtraMessageTypes.BulletDestroyed">
            <summary>
            no message data sent when a player bullet is destroyed
            </summary>
        </member>
        <member name="F:Template.ExtraMessageTypes.PlayerDestroyed">
            <summary>
            no message data sent when player is destroyed
            </summary>
        </member>
        <member name="F:Template.ExtraMessageTypes.EnemyDestroyed">
            <summary>
            object value contains an integer for score value of enemy
            </summary>
        </member>
        <member name="F:Template.ExtraMessageTypes.NameEntryComplete">
            <summary>
            when score is finished, initials are stored in Object which needs casting to (string)
            </summary>
        </member>
        <member name="F:Template.Ship.sailAmount">
            <summary>
            0 stopped, 1 half speed, 2 full speed
            </summary>
        </member>
        <member name="F:Template.Ship.shotTypeLeft">
            <summary>
            Type of shot to be fired from left cannons
            </summary>
        </member>
        <member name="F:Template.Ship.shotTypeRight">
            <summary>
            Type of shot to be fired from right cannons
            </summary>
        </member>
        <member name="F:Template.Ship.crewNum">
            <summary>
            Number of crew remaining
            </summary>
        </member>
        <member name="F:Template.Ship.hasCollided">
            <summary>
            True if ship has collided in the last tick
            </summary>
        </member>
        <member name="F:Template.Ship.isPlayer">
            <summary>
            True if ship is player
            </summary>
        </member>
        <member name="F:Template.Ship.isRepairing">
            <summary>
            True if ship is repairing
            </summary>
        </member>
        <member name="F:Template.Ship.rightLoaded">
            <summary>
            True if right cannons are loaded
            </summary>
        </member>
        <member name="F:Template.Ship.leftLoaded">
            <summary>
            True if left cannons are loaded
            </summary>
        </member>
        <member name="F:Template.Ship.moveLocSprite">
            <summary>
            Sprite used to display player's move orders
            </summary>
        </member>
        <member name="F:Template.Ship.hitBoxArray">
            <summary>
            Array of the ship's HitBoxes, maximum index is 7.
            </summary>
        </member>
        <member name="F:Template.Ship.hitBoxHullLeft">
            <summary>
            HitBox for the left hull
            </summary>
        </member>
        <member name="F:Template.Ship.hitBoxHullRight">
            <summary>
            HitBox for the right hull
            </summary>
        </member>
        <member name="F:Template.Ship.hitBoxHullFront">
            <summary>
            HitBox for the front hull
            </summary>
        </member>
        <member name="F:Template.Ship.hitBoxHullBack">
            <summary>
            HitBox for the back hull
            </summary>
        </member>
        <member name="F:Template.Ship.hitBoxSailFront">
            <summary>
            HitBox for the front sail
            </summary>
        </member>
        <member name="F:Template.Ship.hitBoxSailMiddle">
            <summary>
            Hitbox for the middle sail
            </summary>
        </member>
        <member name="F:Template.Ship.hitBoxSailBack">
            <summary>
            Hitbox for the back sail
            </summary>
        </member>
        <member name="F:Template.Ship.tiReloadRight">
            <summary>
            Timer for right cannon reload
            </summary>
        </member>
        <member name="F:Template.Ship.tiReloadLeft">
            <summary>
            Timer for left cannon reload
            </summary>
        </member>
        <member name="F:Template.Ship.tiOneSecond">
            <summary>
            Timer for 1 second delay
            </summary>
        </member>
        <member name="F:Template.Ship.smoothRotationVelocity">
            <summary>
            Used to keep track of and smooth out RotationVelocity, since RotationVelocity only applies for a single tick
            </summary>
        </member>
        <member name="F:Template.Ship.moveTargetReached">
            <summary>
            Returns true if ship is close enough the the moveTo point
            </summary>
        </member>
        <member name="F:Template.Ship.sinkAmount">
            <summary>
            Amount of water a ship has taken on
            </summary>
        </member>
        <member name="F:Template.Ship.sailDamageSpeedMul">
            <summary>
            Multiplier to speed based on sail damage
            </summary>
        </member>
        <member name="F:Template.Ship.isBoarding">
            <summary>
            True if boarding enemy ship
            </summary>
        </member>
        <member name="F:Template.Ship.isBoarded">
            <summary>
            True if being boarded by enemy ship
            </summary>
        </member>
        <member name="F:Template.Ship.isCuttingRopes">
            <summary>
            True if attempting to cut boarding ropes
            </summary>
        </member>
        <member name="M:Template.Ship.#ctor">
            <summary>
            Ship contains all the functions used by both the player and the AI
            </summary>
        </member>
        <member name="M:Template.Ship.Tick">
            <summary>
            Code to run each tick
            </summary>
        </member>
        <member name="M:Template.Ship.OneSecond">
            <summary>
            Code to run each second
            </summary>
        </member>
        <member name="M:Template.Ship.Fire(System.Boolean,System.Int32)">
            <summary>
            Fire cannons
            </summary>
            <param name="right">If true fire from right side else left side</param><param name="type">Type of shot to use - 0 ball shot, 1 bar shot, 2 grape shot, 3 carcass shot, 4 grapple shot</param>
        </member>
        <member name="M:Template.Ship.MoveToPoint(Microsoft.Xna.Framework.Point)">
            <summary>
            Accelerates the ship towards point and keeps the ship from sliding sideways
            </summary>
            <param name="point">Point to move towards</param>
        </member>
        <member name="M:Template.Program.Main(System.String[])">
            <summary>
            The main entry point for the application.
            </summary>
        </member>
        <member name="T:Template.Title.TitleSetup">
            <summary>
            generates graphs for display
            </summary>
        </member>
        <member name="M:Template.Title.TitleSetup.#ctor(System.String)">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Template.Title.TitleSetup.Tick">
            <summary>
            Display title screen
            </summary>
        </member>
    </members>
</doc>
